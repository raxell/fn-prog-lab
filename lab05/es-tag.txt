 Esercizi su tag value
 ^^^^^^^^^^^^^^^^^^^^^

Consideriamo le seguenti definizioni viste a lezione (file tag.fsx):

type figura = 
   | Rettangolo of  float * float      // (base, altezza)
   | Quadrato   of  float              // lato
   | Triangolo  of  float * float      // (base, altezza)

let area fig =
   match fig with
   | Rettangolo(b,h) ->   b * h     
   | Quadrato l      ->   l * l  
   | Triangolo(b,h)  ->  ( b * h )  / 2. 
// val  area : figura -> float 

Una figura e' *ben definita* se nessuna delle sue dimensioni e' negativa.


1) Definire la funzione areaOpt che calcola l'area di una figura fig, se fig e' ben definita. 
La funzione areaOpt ha tipo

  areaOpt : figura -> float option

e restituisce:

-   None       se fig non e' ben definita 
-   Some a     se fig e' ben definita e l'area di fig e' a (un float).

Esempi:

let a1 = areaOpt ( Rettangolo(2.0,3.0) ) 
// val a1 : float option = Some 6.0
let a2 = areaOpt ( Rettangolo(2.0, -3.0) ) 
// val a2 : float option = None
let a3 =  areaOpt ( Triangolo(2.5, 3.6) )
// val a3 : float option = Some 4.5
let a4 =  areaOpt ( Triangolo(-2.5, 3.6) )
// val a4 : float option = None


2) Definire la funzione

    printArea : figura -> string

che  calcola l'area di una figura  e restituisce una stringa col risultato;
se l'area non e' definita, va restituita un opportuno messaggio


Esempi:

let as1 = printArea ( Quadrato 10. ) 
//val as1 : string = "area: 100"

let as2 = printArea ( Quadrato -10. ) 
//val as2 : string = "la figura non e' ben definita"


3) Definire la funzione

   sommaArea :  figura * figura -> float option

che, date due figure fig1 e fig2, restituisce la somma delle areee delle due figure,
se definita (ossia, se entambe le figure fig1 e fig2 sono ben definite).
Il risultato deve essere un option type.
Per calcolare l'area, usare la funzione areaOpt definita sopra.

Esempi: 

let sum1 = sommaArea ( Rettangolo(2.,5.) , (Quadrato 10.)) ;;
//  val sum1 : float option = Some 110..0

let sum2 = sommaArea ( Rettangolo(2.,-5.),  (Quadrato 10.)) ;;
// val sum2 : float option = None

let sum3 = sommaArea ( Rettangolo(2., 5.), (Quadrato -10.)) ;;
// val sum3 : float option = None

let sum4 =  sommaArea ( Triangolo(10.,5.), Triangolo(3.5,5.)) ;;
// val sum4  : float option = Some 33.75

4) Definire la funzione

    sommaAreaList : figura list -> float

che, data una lista figs di figure, calcola la somma delle aree delle
figure ben definite contenute in figs.
Se la lista figs non contiene figure ben definite, la somma vale zero.

Esempi:

let ret = Rettangolo (5.0, 6.0)
let quad =  Quadrato 2.0
let tr = Triangolo (2.0, -2.0)

let figs1 = [tr]   // la lista non contiene figure ben definite
let s1 = sommaAreaList figs1
// val s1 : float = 0.0

let figs2 = [ ret ; tr ; quad ; tr ; ret ; quad] 
let s2 = sommaAreaList figs2
// s2 : float = 68.0
